{"pages":[{"title":"关于我","text":"不喜欢写东西，所以这里什么也没有。","link":"/about/index.html"}],"posts":[{"title":"这个视频被播放了xxx次","text":"本文可在Bilibili专栏阅读：cv7292636 前不久在YouTube上看到一则视频，来自著名YouTube艺人Tom Scott（B站搬运地址：BV1ZA411t7nK, YouTube地址：BxV14h0kFs0） &emsp;&emsp;这个视频有意思的地方在于，视频的标题准确“预测”了这个视频的播放量。对此，我很好奇他是怎么做到的，一番研究之后我有了答案，并且在B站也能轻易实现。原理只需要一句话就能概括：调用两次API，第一次通过HTTP的GET请求获得播放量，第二次通过POST将播放量更新至标题。下面我们一步一步来看。&emsp;&emsp;程序员小伙伴们对API一定不陌生，全称是应用程序编程接口。简单来说，它就是一部分预先定义的函数，我们无需了解函数具体的工作机制，只需根据接口的定义，就能轻松访问一组例程。下面这张图就展示了这个过程 &emsp;&emsp;不出所料，大家喜爱的B站也有“公开”的API哦。在Github上一番查找后，我决定使用以下两个Python库，分别来自@Passkou和@FortuneDayssss &emsp;&emsp;直接通过视频bv号调用视频信息API可以轻松获得播放量，具体代码如下， 123456789from bilibili_api import videofrom bilibiliuploader.bilibiliuploader import BilibiliUploaderimport osimport timeif __name__ == \"__main__\": bvid = \"BV1Hf4y1Q7CK\" v = video.get_video_info(bvid=bvid) views = v[\"stat\"][\"view\"] &emsp;&emsp;至此，第一步就完成了，仅仅用了10行代码。接下来是第二步，将播放量添加到标题。POST请求需要首先对用户身份进行验证，也就是用账号密码登录才能对自己视频进行标题变更操作。API同样提供了一个简单的接口，第一次通过账号密码登录后可以获得access token，之后使用access token登录，就可以对视频进行任意编辑操作了。 1234uploader = BilibiliUploader()dir_path = os.path.dirname(os.path.realpath(__file__))token_path = dir_path + \"/bililogin.json\"uploader.login_by_access_token_file(token_path) &emsp;&emsp;使用第一步获得的播放量，对标题进行编辑，再使用API发送POST请求更新就完成了。 123456parts = []uploader.edit( bvid=bvid, parts=parts, title='这个视频将会被播放' + str(views) + '次') &emsp;&emsp;最后，只需要在一定周期GET播放量，再POST新的标题就可以达到一种“预知”的效果了。这里就把周期设定为30秒，使用while循环执行，将脚本不间断运行在云服务器上。剩下的就是辛苦标题审核大大啦！小小完善后（控制更新频率）的完整代码如下， 123456789101112131415161718192021222324252627282930313233343536from bilibili_api import videofrom bilibiliuploader.bilibiliuploader import BilibiliUploaderimport os, timeif __name__ == \"__main__\": bvid = \"BV1Hf4y1Q7CK\" uploader = BilibiliUploader() dir_path = os.path.dirname(os.path.realpath(__file__)) token_path = dir_path + \"/bililogin.json\" prev_views = 0 while True: v = video.get_video_info(bvid=bvid) views = v[\"stat\"][\"view\"] if (views &gt; prev_views): uploader.login_by_access_token_file(token_path) if (views &lt; 10000): parts = [] uploader.edit( bvid=bvid, parts=parts, title=\"这个视频将会被播放\" + str(views) + \"次\" ) else: if (views - prev_views &gt; 1000): rounded_views = round(views / 10000, 1) parts = [] uploader.edit( bvid=\"BV1hD4y127PJ\", parts=parts, title=\"这个视频将会被播放\" + str(rounded_views) + \"万次\" ) prev_views = views time.sleep(30) 再次感谢@Passkou和@FortuneDayssss提供的API，有兴趣的小伙伴们也可以去支持一下他们哦。","link":"/2020/08/25/bilibili-title/"},{"title":"Sadowsocks 客户端&#x2F;服务端配置","text":"服务端 在目标服务器上用自动化安装脚本配置Shadowsocks: Github repo. 根据脚本提示配置端口、密码、加密等等。 后续如需编辑端口号、密码等信息，直接编辑/etc/shadowsocks.json即可。客户端根据操作系统下载对应客户端即可，客户端配置输入目标服务器的IP、端口号、加密方式、密码等信息即可建立连接。官方客户端链接：https://shadowsocks.org/en/download/clients.html代理配置文件翻墙直接使用默认配置文件即可，按需增减规则。若回国，根据操作系统平台可使用以下代理配置，收集自网络，经过自行编辑，按需增减规则 Windows: https://raw.githubusercontent.com/shuy98/ss_rule/master/pac.txt Android: https://raw.githubusercontent.com/shuy98/ss_rule/master/rule.txt iOS Shadowrocket: https://raw.githubusercontent.com/shuy98/ss_rule/master/go_home.conf","link":"/2020/09/08/ss-rule/"}],"tags":[{"name":"API","slug":"API","link":"/tags/API/"},{"name":"科学上网","slug":"科学上网","link":"/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"}],"categories":[]}